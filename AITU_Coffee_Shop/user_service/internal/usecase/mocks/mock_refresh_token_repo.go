// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/shynggys9219/ap2_microservices_project/user_svc/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenRepo is an autogenerated mock type for the RefreshTokenRepo type
type RefreshTokenRepo struct {
	mock.Mock
}

type RefreshTokenRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *RefreshTokenRepo) EXPECT() *RefreshTokenRepo_Expecter {
	return &RefreshTokenRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, session
func (_m *RefreshTokenRepo) Create(ctx context.Context, session model.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RefreshTokenRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - session model.Session
func (_e *RefreshTokenRepo_Expecter) Create(ctx interface{}, session interface{}) *RefreshTokenRepo_Create_Call {
	return &RefreshTokenRepo_Create_Call{Call: _e.mock.On("Create", ctx, session)}
}

func (_c *RefreshTokenRepo_Create_Call) Run(run func(ctx context.Context, session model.Session)) *RefreshTokenRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Session))
	})
	return _c
}

func (_c *RefreshTokenRepo_Create_Call) Return(_a0 error) *RefreshTokenRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshTokenRepo_Create_Call) RunAndReturn(run func(context.Context, model.Session) error) *RefreshTokenRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByToken provides a mock function with given fields: ctx, token
func (_m *RefreshTokenRepo) DeleteByToken(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenRepo_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type RefreshTokenRepo_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *RefreshTokenRepo_Expecter) DeleteByToken(ctx interface{}, token interface{}) *RefreshTokenRepo_DeleteByToken_Call {
	return &RefreshTokenRepo_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", ctx, token)}
}

func (_c *RefreshTokenRepo_DeleteByToken_Call) Run(run func(ctx context.Context, token string)) *RefreshTokenRepo_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RefreshTokenRepo_DeleteByToken_Call) Return(_a0 error) *RefreshTokenRepo_DeleteByToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RefreshTokenRepo_DeleteByToken_Call) RunAndReturn(run func(context.Context, string) error) *RefreshTokenRepo_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function with given fields: ctx, token
func (_m *RefreshTokenRepo) GetByToken(ctx context.Context, token string) (model.Session, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 model.Session
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Session, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Session); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(model.Session)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshTokenRepo_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type RefreshTokenRepo_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *RefreshTokenRepo_Expecter) GetByToken(ctx interface{}, token interface{}) *RefreshTokenRepo_GetByToken_Call {
	return &RefreshTokenRepo_GetByToken_Call{Call: _e.mock.On("GetByToken", ctx, token)}
}

func (_c *RefreshTokenRepo_GetByToken_Call) Run(run func(ctx context.Context, token string)) *RefreshTokenRepo_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RefreshTokenRepo_GetByToken_Call) Return(_a0 model.Session, _a1 error) *RefreshTokenRepo_GetByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RefreshTokenRepo_GetByToken_Call) RunAndReturn(run func(context.Context, string) (model.Session, error)) *RefreshTokenRepo_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewRefreshTokenRepo creates a new instance of RefreshTokenRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRefreshTokenRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RefreshTokenRepo {
	mock := &RefreshTokenRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
