// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/shynggys9219/ap2_microservices_project/user_svc/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// CustomerRepo is an autogenerated mock type for the CustomerRepo type
type CustomerRepo struct {
	mock.Mock
}

type CustomerRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerRepo) EXPECT() *CustomerRepo_Expecter {
	return &CustomerRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, customer
func (_m *CustomerRepo) Create(ctx context.Context, customer model.Customer) error {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Customer) error); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CustomerRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - customer model.Customer
func (_e *CustomerRepo_Expecter) Create(ctx interface{}, customer interface{}) *CustomerRepo_Create_Call {
	return &CustomerRepo_Create_Call{Call: _e.mock.On("Create", ctx, customer)}
}

func (_c *CustomerRepo_Create_Call) Run(run func(ctx context.Context, customer model.Customer)) *CustomerRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Customer))
	})
	return _c
}

func (_c *CustomerRepo_Create_Call) Return(_a0 error) *CustomerRepo_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomerRepo_Create_Call) RunAndReturn(run func(context.Context, model.Customer) error) *CustomerRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetListWithFilter provides a mock function with given fields: ctx, filter
func (_m *CustomerRepo) GetListWithFilter(ctx context.Context, filter model.CustomerFilter) ([]model.Customer, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetListWithFilter")
	}

	var r0 []model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CustomerFilter) ([]model.Customer, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CustomerFilter) []model.Customer); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CustomerFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepo_GetListWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListWithFilter'
type CustomerRepo_GetListWithFilter_Call struct {
	*mock.Call
}

// GetListWithFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.CustomerFilter
func (_e *CustomerRepo_Expecter) GetListWithFilter(ctx interface{}, filter interface{}) *CustomerRepo_GetListWithFilter_Call {
	return &CustomerRepo_GetListWithFilter_Call{Call: _e.mock.On("GetListWithFilter", ctx, filter)}
}

func (_c *CustomerRepo_GetListWithFilter_Call) Run(run func(ctx context.Context, filter model.CustomerFilter)) *CustomerRepo_GetListWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CustomerFilter))
	})
	return _c
}

func (_c *CustomerRepo_GetListWithFilter_Call) Return(_a0 []model.Customer, _a1 error) *CustomerRepo_GetListWithFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepo_GetListWithFilter_Call) RunAndReturn(run func(context.Context, model.CustomerFilter) ([]model.Customer, error)) *CustomerRepo_GetListWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// GetWithFilter provides a mock function with given fields: ctx, filter
func (_m *CustomerRepo) GetWithFilter(ctx context.Context, filter model.CustomerFilter) (model.Customer, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetWithFilter")
	}

	var r0 model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CustomerFilter) (model.Customer, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CustomerFilter) model.Customer); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(model.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CustomerFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerRepo_GetWithFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWithFilter'
type CustomerRepo_GetWithFilter_Call struct {
	*mock.Call
}

// GetWithFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.CustomerFilter
func (_e *CustomerRepo_Expecter) GetWithFilter(ctx interface{}, filter interface{}) *CustomerRepo_GetWithFilter_Call {
	return &CustomerRepo_GetWithFilter_Call{Call: _e.mock.On("GetWithFilter", ctx, filter)}
}

func (_c *CustomerRepo_GetWithFilter_Call) Run(run func(ctx context.Context, filter model.CustomerFilter)) *CustomerRepo_GetWithFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CustomerFilter))
	})
	return _c
}

func (_c *CustomerRepo_GetWithFilter_Call) Return(_a0 model.Customer, _a1 error) *CustomerRepo_GetWithFilter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerRepo_GetWithFilter_Call) RunAndReturn(run func(context.Context, model.CustomerFilter) (model.Customer, error)) *CustomerRepo_GetWithFilter_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, filter, update
func (_m *CustomerRepo) Update(ctx context.Context, filter model.CustomerFilter, update model.CustomerUpdateData) error {
	ret := _m.Called(ctx, filter, update)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CustomerFilter, model.CustomerUpdateData) error); ok {
		r0 = rf(ctx, filter, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CustomerRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.CustomerFilter
//   - update model.CustomerUpdateData
func (_e *CustomerRepo_Expecter) Update(ctx interface{}, filter interface{}, update interface{}) *CustomerRepo_Update_Call {
	return &CustomerRepo_Update_Call{Call: _e.mock.On("Update", ctx, filter, update)}
}

func (_c *CustomerRepo_Update_Call) Run(run func(ctx context.Context, filter model.CustomerFilter, update model.CustomerUpdateData)) *CustomerRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CustomerFilter), args[2].(model.CustomerUpdateData))
	})
	return _c
}

func (_c *CustomerRepo_Update_Call) Return(_a0 error) *CustomerRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomerRepo_Update_Call) RunAndReturn(run func(context.Context, model.CustomerFilter, model.CustomerUpdateData) error) *CustomerRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomerRepo creates a new instance of CustomerRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerRepo {
	mock := &CustomerRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
