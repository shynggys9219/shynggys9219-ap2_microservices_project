// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/shynggys9219/ap2_microservices_project/emailer_service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// EmailPresenter is an autogenerated mock type for the EmailPresenter type
type EmailPresenter struct {
	mock.Mock
}

type EmailPresenter_Expecter struct {
	mock *mock.Mock
}

func (_m *EmailPresenter) EXPECT() *EmailPresenter_Expecter {
	return &EmailPresenter_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, customer
func (_m *EmailPresenter) Send(ctx context.Context, customer model.Customer) error {
	ret := _m.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Customer) error); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EmailPresenter_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type EmailPresenter_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - customer model.Customer
func (_e *EmailPresenter_Expecter) Send(ctx interface{}, customer interface{}) *EmailPresenter_Send_Call {
	return &EmailPresenter_Send_Call{Call: _e.mock.On("Send", ctx, customer)}
}

func (_c *EmailPresenter_Send_Call) Run(run func(ctx context.Context, customer model.Customer)) *EmailPresenter_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Customer))
	})
	return _c
}

func (_c *EmailPresenter_Send_Call) Return(_a0 error) *EmailPresenter_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EmailPresenter_Send_Call) RunAndReturn(run func(context.Context, model.Customer) error) *EmailPresenter_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewEmailPresenter creates a new instance of EmailPresenter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailPresenter(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailPresenter {
	mock := &EmailPresenter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
