// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AiRepo is an autogenerated mock type for the AiRepo type
type AiRepo struct {
	mock.Mock
}

type AiRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *AiRepo) EXPECT() *AiRepo_Expecter {
	return &AiRepo_Expecter{mock: &_m.Mock}
}

// Next provides a mock function with given fields: ctx, collection
func (_m *AiRepo) Next(ctx context.Context, collection string) (uint64, error) {
	ret := _m.Called(ctx, collection)

	if len(ret) == 0 {
		panic("no return value specified for Next")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, collection)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, collection)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, collection)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AiRepo_Next_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Next'
type AiRepo_Next_Call struct {
	*mock.Call
}

// Next is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
func (_e *AiRepo_Expecter) Next(ctx interface{}, collection interface{}) *AiRepo_Next_Call {
	return &AiRepo_Next_Call{Call: _e.mock.On("Next", ctx, collection)}
}

func (_c *AiRepo_Next_Call) Run(run func(ctx context.Context, collection string)) *AiRepo_Next_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AiRepo_Next_Call) Return(_a0 uint64, _a1 error) *AiRepo_Next_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AiRepo_Next_Call) RunAndReturn(run func(context.Context, string) (uint64, error)) *AiRepo_Next_Call {
	_c.Call.Return(run)
	return _c
}

// NewAiRepo creates a new instance of AiRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAiRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AiRepo {
	mock := &AiRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
