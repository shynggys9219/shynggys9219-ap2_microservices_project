// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// MsgHandler is an autogenerated mock type for the MsgHandler type
type MsgHandler struct {
	mock.Mock
}

type MsgHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MsgHandler) EXPECT() *MsgHandler_Expecter {
	return &MsgHandler_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, msg
func (_m *MsgHandler) Execute(ctx context.Context, msg *nats.Msg) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *nats.Msg) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MsgHandler_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MsgHandler_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *nats.Msg
func (_e *MsgHandler_Expecter) Execute(ctx interface{}, msg interface{}) *MsgHandler_Execute_Call {
	return &MsgHandler_Execute_Call{Call: _e.mock.On("Execute", ctx, msg)}
}

func (_c *MsgHandler_Execute_Call) Run(run func(ctx context.Context, msg *nats.Msg)) *MsgHandler_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*nats.Msg))
	})
	return _c
}

func (_c *MsgHandler_Execute_Call) Return(_a0 error) *MsgHandler_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MsgHandler_Execute_Call) RunAndReturn(run func(context.Context, *nats.Msg) error) *MsgHandler_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMsgHandler creates a new instance of MsgHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMsgHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MsgHandler {
	mock := &MsgHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
