// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "github.com/shynggys9219/ap2_microservices_project/user_svc/internal/model"
)

// CustomerUsecase is an autogenerated mock type for the CustomerUsecase type
type CustomerUsecase struct {
	mock.Mock
}

type CustomerUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerUsecase) EXPECT() *CustomerUsecase_Expecter {
	return &CustomerUsecase_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CustomerUsecase) Delete(ctx context.Context, id uint64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerUsecase_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type CustomerUsecase_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
func (_e *CustomerUsecase_Expecter) Delete(ctx interface{}, id interface{}) *CustomerUsecase_Delete_Call {
	return &CustomerUsecase_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *CustomerUsecase_Delete_Call) Run(run func(ctx context.Context, id uint64)) *CustomerUsecase_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *CustomerUsecase_Delete_Call) Return(_a0 error) *CustomerUsecase_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomerUsecase_Delete_Call) RunAndReturn(run func(context.Context, uint64) error) *CustomerUsecase_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, token, id
func (_m *CustomerUsecase) Get(ctx context.Context, token string, id uint64) (model.Customer, error) {
	ret := _m.Called(ctx, token, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) (model.Customer, error)); ok {
		return rf(ctx, token, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64) model.Customer); ok {
		r0 = rf(ctx, token, id)
	} else {
		r0 = ret.Get(0).(model.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64) error); ok {
		r1 = rf(ctx, token, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerUsecase_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CustomerUsecase_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - id uint64
func (_e *CustomerUsecase_Expecter) Get(ctx interface{}, token interface{}, id interface{}) *CustomerUsecase_Get_Call {
	return &CustomerUsecase_Get_Call{Call: _e.mock.On("Get", ctx, token, id)}
}

func (_c *CustomerUsecase_Get_Call) Run(run func(ctx context.Context, token string, id uint64)) *CustomerUsecase_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64))
	})
	return _c
}

func (_c *CustomerUsecase_Get_Call) Return(_a0 model.Customer, _a1 error) *CustomerUsecase_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerUsecase_Get_Call) RunAndReturn(run func(context.Context, string, uint64) (model.Customer, error)) *CustomerUsecase_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, email, password
func (_m *CustomerUsecase) Login(ctx context.Context, email string, password string) (model.Token, error) {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.Token, error)); ok {
		return rf(ctx, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.Token); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Get(0).(model.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerUsecase_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type CustomerUsecase_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
//   - password string
func (_e *CustomerUsecase_Expecter) Login(ctx interface{}, email interface{}, password interface{}) *CustomerUsecase_Login_Call {
	return &CustomerUsecase_Login_Call{Call: _e.mock.On("Login", ctx, email, password)}
}

func (_c *CustomerUsecase_Login_Call) Run(run func(ctx context.Context, email string, password string)) *CustomerUsecase_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *CustomerUsecase_Login_Call) Return(_a0 model.Token, _a1 error) *CustomerUsecase_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerUsecase_Login_Call) RunAndReturn(run func(context.Context, string, string) (model.Token, error)) *CustomerUsecase_Login_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *CustomerUsecase) RefreshToken(ctx context.Context, refreshToken string) (model.Token, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 model.Token
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Token, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Token); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(model.Token)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerUsecase_RefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshToken'
type CustomerUsecase_RefreshToken_Call struct {
	*mock.Call
}

// RefreshToken is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *CustomerUsecase_Expecter) RefreshToken(ctx interface{}, refreshToken interface{}) *CustomerUsecase_RefreshToken_Call {
	return &CustomerUsecase_RefreshToken_Call{Call: _e.mock.On("RefreshToken", ctx, refreshToken)}
}

func (_c *CustomerUsecase_RefreshToken_Call) Run(run func(ctx context.Context, refreshToken string)) *CustomerUsecase_RefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerUsecase_RefreshToken_Call) Return(_a0 model.Token, _a1 error) *CustomerUsecase_RefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerUsecase_RefreshToken_Call) RunAndReturn(run func(context.Context, string) (model.Token, error)) *CustomerUsecase_RefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, request
func (_m *CustomerUsecase) Register(ctx context.Context, request model.Customer) (uint64, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Customer) (uint64, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Customer) uint64); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Customer) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerUsecase_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type CustomerUsecase_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - request model.Customer
func (_e *CustomerUsecase_Expecter) Register(ctx interface{}, request interface{}) *CustomerUsecase_Register_Call {
	return &CustomerUsecase_Register_Call{Call: _e.mock.On("Register", ctx, request)}
}

func (_c *CustomerUsecase_Register_Call) Run(run func(ctx context.Context, request model.Customer)) *CustomerUsecase_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Customer))
	})
	return _c
}

func (_c *CustomerUsecase_Register_Call) Return(_a0 uint64, _a1 error) *CustomerUsecase_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerUsecase_Register_Call) RunAndReturn(run func(context.Context, model.Customer) (uint64, error)) *CustomerUsecase_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, token, request
func (_m *CustomerUsecase) Update(ctx context.Context, token string, request model.Customer) (model.Customer, error) {
	ret := _m.Called(ctx, token, request)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Customer) (model.Customer, error)); ok {
		return rf(ctx, token, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, model.Customer) model.Customer); ok {
		r0 = rf(ctx, token, request)
	} else {
		r0 = ret.Get(0).(model.Customer)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, model.Customer) error); ok {
		r1 = rf(ctx, token, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerUsecase_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type CustomerUsecase_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
//   - request model.Customer
func (_e *CustomerUsecase_Expecter) Update(ctx interface{}, token interface{}, request interface{}) *CustomerUsecase_Update_Call {
	return &CustomerUsecase_Update_Call{Call: _e.mock.On("Update", ctx, token, request)}
}

func (_c *CustomerUsecase_Update_Call) Run(run func(ctx context.Context, token string, request model.Customer)) *CustomerUsecase_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(model.Customer))
	})
	return _c
}

func (_c *CustomerUsecase_Update_Call) Return(_a0 model.Customer, _a1 error) *CustomerUsecase_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerUsecase_Update_Call) RunAndReturn(run func(context.Context, string, model.Customer) (model.Customer, error)) *CustomerUsecase_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomerUsecase creates a new instance of CustomerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerUsecase {
	mock := &CustomerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
